//A data structure that consists of nodes in a parent/child relationship.
//Root: top node of a tree
//Child: node directly connected to another node when moving away from the root.
//Parent: the converse notion of a child.
//Siblings: a group of nodes with similar parents.
//Leaf: node with no children.
//Edge: connection between one node & another.

//Applications: 
//1. HTML DOM
//2. Network Routing
//3. File Management
//4. Artificial Intelligence (Tic-Tac-Toe)
//5. JSON
// etc

//Binary Search Tree
// ** At most 2 children (0,1,2)
// ** left child < parent < right child

//      10   count = 2
//   /      \
//  6        13 
// / \      / \  
//5  8     11  15
//   /
//  7

//Traversing (can be done on any tree)
//Breadth First Search
//queue:[]
//data:[10,6,13,5,8,11,15,7]

//Depth First Search
//Pre-Order: root left right  [10 6 5 8 7 13 11 15]
//Post-Order: left right root [5 7 8 6 11 15 13 10]
//In-Order: left root right   [5 6 7 8 10 11 13 15]  can give sorted values for bst in ascending order.

//When tree is broader use DFS
//When tree is deeper use BFS